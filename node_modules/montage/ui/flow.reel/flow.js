/* <copyright>
This file contains proprietary software owned by Motorola Mobility, Inc.<br/>
No rights, expressed or implied, whatsoever to this software are provided by Motorola Mobility, Inc. hereunder.<br/>
(c) Copyright 2011 Motorola Mobility, Inc.  All Rights Reserved.
</copyright> */

var Montage = require("montage").Montage,
    Component = require("ui/component").Component;

var Flow = exports.Flow = Montage.create(Component, {
    
    _path: {
        enumerable: false,
        value: {
            value: function (slide) {   
                return {
                    translateX: slide.time,
                    translateY: 0,
                    translateZ: 0,
                    scale: 1,
                    rotateX: 0,
                    rotateY: 0,
                    rotateZ: 0,
                    transformOriginX: 0,
                    transformOriginY: 0,
                    transformOriginZ: 0,
                    style: {}
                };
            }
        }
    },
    
    path: {
        get: function () {
            return this._path;
        },
        set: function (value) {
            this._path = value;
            this.needsDraw = true;
        }
    },
    
    _rotationOrder: {
        enumerable: false,
        value: "xyz"
    },
    
    rotationOrder: {
        get: function () {
            return this._rotationOrder;
        },
        set: function (value) {
            switch (value) {
                case "xzy":
                case "yxz":
                case "yzx":
                case "zxy":
                case "zyx":                
                    this._rotationOrder=value;
                    break;
                default:
                    this._rotationOrder="xyz";
                    break;
            }
            this.needsDraw = true;
        }
    },
    
    numberOfNodes: {
        value: null
    },
    
    _nodeOffset: {
        enumerable: false,
        value: {
            value: function (nodeNumber) {
                return {
                    time: nodeNumber*100,
                    speed: 0
                }
            }
        }
    },
    
    nodeOffset: {
        get: function () {
            return this._nodeOffset;
        },
        set: function (value) {
            this._nodeOffset = value;
            this.needsDraw = true;
        }
    },
    
    _width: {
        enumerable: false,
        value: null
    },

    _height: {
        enumerable: false,
        value: null
    },
    
    _repetitionComponents: {
        enumerable: false,
        value: null
    },
    
    prepareForDraw: {
        enumerable: false,
        value: function () {
            this._repetitionComponents=this._repetition._childComponents;
        }
    },
    
    draw: {
        enumerable: false,
        value: function () {
            var i,
                length = this.numberOfNodes,
                slide={
                    index: null,
                    time: null,
                    speed: null
                },
                transform,
                origin,
                iPath,
                j,
                jPath,
                iOffset,
                iStyle;
            
            for (i=0; i<length; i++) {
                iStyle=this._repetitionComponents[i].element.style;
                iOffset=this._nodeOffset.value(i);
                slide.index=i;
                slide.time=iOffset.time;
                slide.speed=iOffset.speed;
                iPath=this._path.value(slide);
                if (typeof iPath.translateX==="undefined") {
                    iPath.translateX=0;
                }
                if (typeof iPath.translateY==="undefined") {
                    iPath.translateY=0;
                }
                if (typeof iPath.translateZ==="undefined") {
                    iPath.translateZ=0;
                }
                transform="translate3d(";
                transform+=(typeof iPath.translateX==="number")?iPath.translateX+"px,":iPath.translateX+",";
                transform+=(typeof iPath.translateY==="number")?iPath.translateY+"px,":iPath.translateY+",";
                transform+=(typeof iPath.translateZ==="number")?iPath.translateZ+"px) ":iPath.translateZ+") ";
                transform+=(typeof iPath.scale!=="undefined")?"scale("+iPath.scale+") ":"";
                switch (this._rotationOrder) {
                    case "xyz":
                        transform+=(typeof iPath.rotateZ!=="undefined")?"rotateZ("+iPath.rotateZ+"rad) ":"";
                        transform+=(typeof iPath.rotateY!=="undefined")?"rotateY("+iPath.rotateY+"rad) ":"";
                        transform+=(typeof iPath.rotateX!=="undefined")?"rotateX("+iPath.rotateX+"rad) ":"";
                        break;
                    case "xzy":                        
                        transform+=(typeof iPath.rotateY!=="undefined")?"rotateY("+iPath.rotateY+"rad) ":"";
                        transform+=(typeof iPath.rotateZ!=="undefined")?"rotateZ("+iPath.rotateZ+"rad) ":"";                        
                        transform+=(typeof iPath.rotateX!=="undefined")?"rotateX("+iPath.rotateX+"rad) ":"";
                        break;                    
                    case "yxz":
                        transform+=(typeof iPath.rotateZ!=="undefined")?"rotateZ("+iPath.rotateZ+"rad) ":"";                        
                        transform+=(typeof iPath.rotateX!=="undefined")?"rotateX("+iPath.rotateX+"rad) ":"";
                        transform+=(typeof iPath.rotateY!=="undefined")?"rotateY("+iPath.rotateY+"rad) ":"";                        
                        break;                    
                    case "yzx":
                        transform+=(typeof iPath.rotateX!=="undefined")?"rotateX("+iPath.rotateX+"rad) ":"";
                        transform+=(typeof iPath.rotateZ!=="undefined")?"rotateZ("+iPath.rotateZ+"rad) ":"";                        
                        transform+=(typeof iPath.rotateY!=="undefined")?"rotateY("+iPath.rotateY+"rad) ":"";                        
                        break;                    
                    case "zxy":
                        transform+=(typeof iPath.rotateY!=="undefined")?"rotateY("+iPath.rotateY+"rad) ":"";
                        transform+=(typeof iPath.rotateX!=="undefined")?"rotateX("+iPath.rotateX+"rad) ":"";
                        transform+=(typeof iPath.rotateZ!=="undefined")?"rotateZ("+iPath.rotateZ+"rad) ":"";                        
                        break;                    
                    case "zyx":  
                        transform+=(typeof iPath.rotateX!=="undefined")?"rotateX("+iPath.rotateX+"rad) ":"";
                        transform+=(typeof iPath.rotateY!=="undefined")?"rotateY("+iPath.rotateY+"rad) ":"";
                        transform+=(typeof iPath.rotateZ!=="undefined")?"rotateZ("+iPath.rotateZ+"rad) ":"";
                        break;
                }
                iStyle.webkitTransform=transform;
                if (typeof iPath.transformOriginX==="undefined") {
                    iPath.transformOriginX="50%";
                }
                if (typeof iPath.transformOriginY==="undefined") {
                    iPath.transformOriginY="50%";
                }
                if (typeof iPath.transformOriginZ==="undefined") {
                    iPath.transformOriginZ=0;
                }
                origin=(typeof iPath.transformOriginX==="number")?iPath.transformOriginX+"px ":iPath.transformOriginX+" ";
                origin+=(typeof iPath.transformOriginY==="number")?iPath.transformOriginY+"px ":iPath.transformOriginY+" ";
                origin+=(typeof iPath.transformOriginZ==="number")?iPath.transformOriginZ+"px":iPath.transformOriginZ;
                iStyle.webkitTransformOrigin=origin;
                if (typeof iPath.style!=="undefined") {
                    for (j in iPath.style) {
                        if ((iPath.style.hasOwnProperty(j))&&(iStyle[j]!==iPath.style[j])) {
                            iStyle[j]=iPath.style[j];
                        }
                    }
                }
            }
        }
    },
    
    /////////////////////////////// Almost Copy/Pasted from List ///////////////////////////
    
    _orphanedChildren: {
        enumerable: false,
        value: null
    },

    _objectsForRepetition: {
        enumerable: false,
        value: null
    },

    objects: {
        enumerable: false,
        get: function() {
            if (this._repetition) {
                return this._repetition.objects;
            } else {
                return this._objectsForRepetition;
            }
        },
        set: function(value) {
            if (this._repetition) {
                this._repetition.objects = value;
            } else {
                this._objectsForRepetition = value;
            }
        }
    },

    _contentControllerForRepetition: {
        enumerable: false,
        value: null
    },

    contentController: {
        enumerable: false,
        get: function() {
            if (this._repetition) {
                return this._repetition.contentController;
            } else {
                return this._contentControllerForRepetition;
            }
        },
        set: function(value) {
            if (this._repetition) {
                this._repetition.contentController = value;
            } else {
                this._contentControllerForRepetition = value;
            }
        }
    },
    
    _isSelectionEnabledForRepetition: {
        enumerable: false,
        value: null
    },

    isSelectionEnabled: {
        enumerable: false,
        get: function() {
            if (this._repetition) {
                return this._repetition.isSelectionEnabled;
            } else {
                return this._isSelectionEnabledForRepetition;
            }
        },
        set: function(value) {
            if (this._repetition) {
                this._repetition.isSelectionEnabled = value;
            } else {
                this._isSelectionEnabledForRepetition = value;
            }
        }
    },

    propertyChangeBindingListener: {
        value: function(type, listener, useCapture, atSignIndex, bindingOrigin, bindingPropertyPath, bindingDescriptor) {
            if (bindingDescriptor.boundObjectPropertyPath.match(/objectAtCurrentIteration/)) {
                if (this._repetition) {
                    bindingDescriptor.boundObject = this._repetition;
                    return this._repetition.propertyChangeBindingListener.apply(this._repetition, arguments);
                } else {
                    return null;
                }
            } else {
                return Object.prototype.propertyChangeBindingListener.apply(this, arguments);
            }
        }
    },

    deserializedFromTemplate: {
        value: function() {
            this._orphanedChildren = this.childComponents;
            this.childComponents = null;
        }
    },

    _repetitionDraw: {
        enumerable: false,
        value: function () {
            this.numberOfNodes=this._repetition._childComponents.length;
        }
    },
    
    templateDidLoad: {
        value: function() {
            var orphanedFragment,
                currentContentRange = this.element.ownerDocument.createRange(),
                oldRepetitionDraw = this._repetition.draw,
                self = this;
            
            this._repetition.draw = function () {
                oldRepetitionDraw.call(self._repetition);
                self._repetitionDraw();
            };
            currentContentRange.selectNodeContents(this.element);
            orphanedFragment = currentContentRange.extractContents();
            this._repetition.element.appendChild(orphanedFragment);
            this._repetition.childComponents = this._orphanedChildren;
            this._repetition.needsDraw = true;
            if (this._objectsForRepetition !== null) {
                this._repetition.objects = this._objectsForRepetition;
                this._objectsForRepetition = null;
            }
            if (this._contentControllerForRepetition !== null) {
                this._repetition.contentController = this._contentControllerForRepetition;
                this._contentControllerForRepetition = null;
            }
            if (this._isSelectionEnabledForRepetition !== null) {
                this._repetition.isSelectionEnabled = this._isSelectionEnabledForRepetition;
                this._isSelectionEnabledForRepetition = null;
            }
        }
    }
});